"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InboxesEndpoint = void 0;
class InboxesEndpoint {
    constructor(http) {
        this.http = http;
    }
    getInboxes() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', '/inboxes');
        });
    }
    getInbox(idInbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}`);
        });
    }
    patchInbox(idInbox, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('PATCH', `/inboxes/${idInbox}`, data);
        });
    }
    deleteInbox(idInbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('DELETE', `/inboxes/${idInbox}`);
        });
    }
    cleanInbox(idInbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('PATCH', `/inboxes/${idInbox}/clean`);
        });
    }
    markAllAsReadInInbox(idInbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('PATCH', `/inboxes/${idInbox}/all_read`);
        });
    }
    resetInboxCredentials(idInbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('PATCH', `/inboxes/${idInbox}/reset_credentials`);
        });
    }
    resetInboxEmailUsername(idInbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('PATCH', `/inboxes/${idInbox}/reset_email_username`);
        });
    }
    toggleInboxEmailUsername(idInbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('PATCH', `/inboxes/${idInbox}/toggle_email_username`);
        });
    }
    getForwardRules(idInbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/forward_rules`);
        });
    }
    createForwardRule(idInbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('POST', `/inboxes/${idInbox}/forward_rules`);
        });
    }
    getForwardRule(idInbox, idForwardRule) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/forward_rules/${idForwardRule}`);
        });
    }
    patchForwardRule(idInbox, idForwardRule, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('PATCH', `/inboxes/${idInbox}/forward_rules/${idForwardRule}`, data);
        });
    }
    deleteForwardRule(idInbox, idForwardRule) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('DELETE', `/inboxes/${idInbox}/forward_rules/${idForwardRule}`);
        });
    }
    getInboxUsers(idInbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/inboxes_users`);
        });
    }
    getInboxUser(idInbox, idInboxUser) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/inboxes_users/${idInboxUser}`);
        });
    }
    deleteInboxUser(idInbox, idInboxUser) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('DELETE', `/inboxes/${idInbox}/inboxes_users`);
        });
    }
}
exports.InboxesEndpoint = InboxesEndpoint;
