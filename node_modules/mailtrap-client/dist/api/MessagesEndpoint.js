"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagesEndpoint = void 0;
const MessagesObservable_1 = require("../observers/MessagesObservable");
class MessagesEndpoint {
    constructor(http) {
        this.http = http;
    }
    getMessages(idInbox) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/messages`);
        });
    }
    getMessage(idInbox, idMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/messages/${idMessage}`);
        });
    }
    patchMessage(idInbox, idMessage, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('PATCH', `/inboxes/${idInbox}/messages/${idMessage}`, data);
        });
    }
    deleteMessage(idInbox, idMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('DELETE', `/inboxes/${idInbox}/messages/${idMessage}`);
        });
    }
    forwardMessage(idInbox, idMessage, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('POST', `/inboxes/${idInbox}/messages/${idMessage}/forward`, data);
        });
    }
    getMessageBody(idInbox, idMessage, type) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/messages/${idMessage}/body.${type}`, 'text');
        });
    }
    getMessageBodyEml(idInbox, idMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getMessageBody(idInbox, idMessage, 'eml');
        });
    }
    getMessageBodyHtml(idInbox, idMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getMessageBody(idInbox, idMessage, 'html');
        });
    }
    getMessageBodyHtmlSource(idInbox, idMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getMessageBody(idInbox, idMessage, 'htmlsource');
        });
    }
    getMessageBodyRaw(idInbox, idMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getMessageBody(idInbox, idMessage, 'raw');
        });
    }
    getMessageBodyTxt(idInbox, idMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getMessageBody(idInbox, idMessage, 'txt');
        });
    }
    getMessageHeaders(idInbox, idMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/messages/${idMessage}/mail_headers`);
        });
    }
    getMessageSpamReport(idInbox, idMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/messages/${idMessage}/spam_report`);
        });
    }
    getMessageAnalyze(idInbox, idMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/messages/${idMessage}/analyze`);
        });
    }
    getMessageAttachment(idInbox, idMessage, idAttachment) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/messages/${idMessage}/attachments/${idAttachment}`);
        });
    }
    getMessageAttachments(idInbox, idMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('GET', `/inboxes/${idInbox}/messages/${idMessage}/attachments`);
        });
    }
    watch(idInbox, options = {}) {
        return new MessagesObservable_1.MessagesObservable(this, idInbox, options);
    }
}
exports.MessagesEndpoint = MessagesEndpoint;
