"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagesObservable = void 0;
const rxjs_1 = require("rxjs");
class MessagesObservable {
    constructor(messages, idInbox, { pollInterval = 1000, date = new Date(), autoStart = false } = {}) {
        this.messages = messages;
        this.idInbox = idInbox;
        this.pollInterval = pollInterval;
        this.date = date;
        this.autoStart = autoStart;
        this.observable = new rxjs_1.Observable((s) => (this.subscriber = s));
        if (this.autoStart) {
            this.start();
        }
    }
    start() {
        this.interval = setInterval(() => this.poll(), this.pollInterval);
    }
    stop() {
        if (this.interval) {
            clearInterval(this.interval);
        }
    }
    poll() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.subscriber) {
                    const messages = (yield this.messages.getMessages(this.idInbox)).filter((msg) => new Date(msg.created_at) >= this.date);
                    this.subscriber.next(messages);
                }
            }
            catch (e) {
                this.stop();
                throw e;
            }
        });
    }
    subscribe(next, error, complete) {
        return this.observable.subscribe(next, error, complete);
    }
}
exports.MessagesObservable = MessagesObservable;
